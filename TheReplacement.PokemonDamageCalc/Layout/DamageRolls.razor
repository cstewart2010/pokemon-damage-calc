@using TheReplacement.PokemonDamageCalc.DataModel;
@using TheReplacement.PokemonDamageCalc.Extensions;
@using TheReplacement.PokemonDamageCalc.Services;
@inject IDamageService _damageService;
<div class="h3">
    <strong>
        @Move.Name.ToCapitalized():
    </strong>
    @SetDamageRolls()
</div>
@if (_rolls.Any())
{
    <div class="table-responsive text-center">
        <table class="table align-middle">
            <thead>
                <tr>
                    @foreach (var damageRoll in _rolls)
                    {
                        <th>@damageRoll.Roll% DR</th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    @foreach (var damageRoll in _rolls)
                    {
                        <td>@damageRoll.Damage</td>
                    }
                </tr>
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<DamageRoll> _rolls = [];

    [Parameter, EditorRequired]
    public StattedPokemon OffensivePokemon { get; set; }
    [Parameter, EditorRequired]
    public StattedPokemon DefensivePokemon { get; set; }
    [Parameter, EditorRequired]
    public Conditionals Conditionals { get; set; }
    [Parameter, EditorRequired]
    public StringPair StatusConditions { get; set; }
    [Parameter, EditorRequired]
    public string Weather { get; set; }
    [Parameter, EditorRequired]
    public string Terrain { get; set; }
    [Parameter, EditorRequired]
    public ICollection<string> SetMovesErrors { get; set; }
    [Parameter, EditorRequired]
    public DTOs.MoveData Move { get; set; }

    private string SetDamageRolls()
    {
        SetMovesErrors.Clear();
        try
        {
            _rolls = _damageService.GetDamageRolls(
                OffensivePokemon,
                DefensivePokemon,
                Move,
                Conditionals,
                StatusConditions,
                Weather,
                Terrain);

            var lowRoll = (_rolls.FirstOrDefault()?.Damage ?? 0) / DefensivePokemon.CurrentHP * 100;
            var highRoll = (_rolls.LastOrDefault()?.Damage ?? 0) / DefensivePokemon.CurrentHP * 100;
            return $"{Math.Floor(lowRoll * 10) / 10} - {Math.Floor(highRoll * 10) / 10}%";
        }
        catch (Exception ex)
        {
            SetMovesErrors.Add(ex.ToString());
            _rolls = [];
            return string.Empty;
        }
    }
}
