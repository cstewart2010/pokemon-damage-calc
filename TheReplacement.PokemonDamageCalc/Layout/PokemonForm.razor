@using TheReplacement.PokemonDamageCalc.DTOs;
@using TheReplacement.PokemonDamageCalc.Extensions;
<div class="row mb-3">
    <div class="col-12 col-sm-6 col-md-4 col-lg">
        <div class="input-group">
            <span class="input-group-text">@Form</span>
            @if (PokemonList.Count > 1)
            {
                <InputSelect class="form-select" @bind-Value="FormIndex" @oninput="e => OnIntChanged(e, FormIndexChanged)">
                    @for (var index = 0; index < PokemonList.Count; index++)
                    {
                        <option value="@index">@PokemonList[index].SpeciesName.ToCapitalized()</option>
                    }
                </InputSelect>
            }
            else
            {
                <div class="form-select">@PokemonList.First().SpeciesName.ToCapitalized()</div>
            }
        </div>
    </div>
    <div class="col-12 col-sm-6 col-md-4 col-lg">
        <div class="input-group">
            <span class="input-group-text">Level</span>
            <input class="form-control" type="number" min="1" max="100" @bind-value="Level" @oninput="e => OnIntChanged(e, LevelChanged)" />
        </div>
    </div>
    <div class="col-12 col-sm-6 col-md-4 col-lg">
        <div class="input-group">
            <span class="input-group-text">Nature</span>
            <InputSelect class="form-select" @bind-Value="NatureIndex" @oninput="e => OnIntChanged(e, NatureIndexChanged)">
                @for (var index = 0; index < Natures.Count; index++)
                {
                    <option value="@index">@Natures[index]</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-md-4 col-lg">
        <div class="input-group">
            <span class="input-group-text">Ability</span>
            <InputSelect class="form-select" @bind-Value="Ability" @oninput="e => OnIntChanged(e, AbilityChanged)">
                @for (var index = 0; index < AbilityList.Count; index++)
                {
                    @if (AbilityList[index].IsHidden)
                    {
                        <option value="@index">@AbilityList[index].Name.ToCapitalized() (Hidden)</option>
                    }
                    else
                    {
                        <option value="@index">@AbilityList[index].Name.ToCapitalized()</option>
                    }
                }
            </InputSelect>
        </div>
    </div>
    <div class="col-12 col-sm-6 col-md-4 col-lg">
        <div class="input-group">
            <span class="input-group-text">Held Item</span>
            <input class="form-control" list="itemList" placeholder="Type to search..." @bind-value="Item" @oninput="e => OnStringChanged(e, ItemChanged)" />
            <datalist id="itemList">
                @foreach (var item in ItemCollection)
                {
                    <option value="@item">@item</option>
                }
            </datalist>
        </div>
    </div>
    @if (IsPokemonTera)
    {
        <div class="col-12 col-sm-6 col-md-4 col-lg">
            <div class="input-group">
                <span class="input-group-text">Tera Type</span>
                <InputSelect class="form-select" @bind-Value="Tera" @oninput="e => OnStringChanged(e, TeraChanged)">
                    @foreach (var type in Constants.Maps.TypeEffectivenessChart.Keys)
                    {
                        <option value="@type">@type.ToCapitalized()</option>
                    }
                </InputSelect>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public string Form { get; set; }
    [Parameter, EditorRequired]
    public bool IsPokemonTera { get; set; }
    [Parameter, EditorRequired]
    public List<RawPokemon> PokemonList { get; set; }
    [Parameter, EditorRequired]
    public List<AbilityData> AbilityList { get; set; }
    [Parameter, EditorRequired]
    public List<string> Natures { get; set; }
    [Parameter, EditorRequired]
    public ICollection<string> ItemCollection { get; set; }
    [Parameter, EditorRequired]
    public int FormIndex { get; set; }
    [Parameter]
    public EventCallback<int> FormIndexChanged { get; set; }
    [Parameter, EditorRequired]
    public int Level { get; set; }
    [Parameter]
    public EventCallback<int> LevelChanged { get; set; }
    [Parameter, EditorRequired]
    public int NatureIndex { get; set; }
    [Parameter]
    public EventCallback<int> NatureIndexChanged { get; set; }
    [Parameter, EditorRequired]
    public int Ability { get; set; }
    [Parameter]
    public EventCallback<int> AbilityChanged { get; set; }
    [Parameter, EditorRequired]
    public string Item { get; set; }
    [Parameter]
    public EventCallback<string> ItemChanged { get; set; }
    [Parameter, EditorRequired]
    public string Tera { get; set; }
    [Parameter]
    public EventCallback<string> TeraChanged { get; set; }

    private async Task OnIntChanged(ChangeEventArgs e, EventCallback<int> callback)
    {
        if (int.TryParse(e.Value?.ToString(), out var index))
        {
            await callback.InvokeAsync(index);
        }
    }

    private async Task OnStringChanged(ChangeEventArgs e, EventCallback<string> callback)
    {
        var item = e.Value?.ToString();
        if (item != null)
        {
            await callback.InvokeAsync(item);
        }
    }
}
