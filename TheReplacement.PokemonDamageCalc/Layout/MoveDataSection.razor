@using TheReplacement.PokemonDamageCalc.Extensions;
<div class="h3">
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="description-check" @bind-Value="_displayDescription" />
        <label class="form-check-label" for="description-check">
            Move Description
        </label>
    </div>
</div>
<div class="row border border-dark" hidden="@(!_displayDescription)">
    <div class="col">Name</div>
    <div class="col border-dark border-start">Type</div>
    <div class="col border-dark border-start">Damage Class</div>
    <div class="col border-dark border-start">Description</div>
    <div class="col border-dark border-start">Base Power</div>
    <div class="col border-dark border-start">Accuracy</div>
</div>
<div class="row border border-dark border-top-0" hidden="@(!_displayDescription)">
    <div class="col">@Move.Name.ToCapitalized()</div>
    <div class="col border-dark border-start">@Move.Type.ToCapitalized()</div>
    <div class="col border-dark border-start">@Move.DamageClass.ToCapitalized()</div>
    <div class="col border-dark border-start">@Move.FlavorText</div>
    <div class="col border-dark border-start">@GetDamage()</div>
    <div class="col border-dark border-start">@Move.Accuracy</div>
</div>

@code {
    private bool _displayDescription = true;

    [Parameter, EditorRequired]
    public DTOs.MoveData Move { get; set; }

    private object? GetDamage()
    {
        if (Move.DamageClass == Constants.DamageClasses.Status)
        {
            return "0";
        }
        else if (Move.BasePower == null)
        {
            return "Variable";
        }
        else
        {
            return Move.BasePower;
        }
    }
}
