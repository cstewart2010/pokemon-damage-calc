@page "/calc"
@rendermode InteractiveWebAssembly
@inject IDamageService _damageService;
@inject IPokeApiService _pokeApiService;
@using PokeApiNet;
@using TheReplacement.PokemonDamageCalc.Client.Constants;
@using TheReplacement.PokemonDamageCalc.Client.DataModel;
@using TheReplacement.PokemonDamageCalc.Client.Extensions;
@using TheReplacement.PokemonDamageCalc.Client.Services;

<PageTitle>Calculator</PageTitle>
<!-- Fix the monolith -->
@if (IsReady)
{
    <div class="input-group">
        <span class="input-group-text">Offensive Pokemon Species</span>
        <input class="form-control" list="offensiveDex" placeholder="Type to search..." @bind-value="Names.Offensive" @bind-value:after="ResetOffensivePokemonAsync" />
        <datalist id="offensiveDex">
            @for (var index = 0; index < PokedexCollection.Count; index++)
            {
                <option value="@PokedexCollection[index]">@PokedexCollection[index]</option>
            }
        </datalist>
        <span class="input-group-text">Defensive Pokemon Species</span>
        <input class="form-control" list="defensiveDex" placeholder="Type to search..." @bind-value="Names.Defensive" @bind-value:after="ResetDefensivePokemonAsync" />
        <datalist id="defensiveDex">
            @for (var index = 0; index < PokedexCollection.Count; index++)
            {
                <option value="@PokedexCollection[index]">@PokedexCollection[index]</option>
            }
        </datalist>
    </div>

    @if (!(_offensivePokemon == null || _defensivePokemon == null))
    {
        <div class="input-group">
            <span class="input-group-text">Offensive Pokemon</span>
            <InputSelect class="form-select" @bind-Value="FormIndicies.Offensive" @bind-Value:after="UpdateOffensiveForm">
                @for (var index = 0; index < _offensivePokemonList.Count; index++)
                {
                    <option value="@index">@_offensivePokemonList[index].Name.ToCapitalized()</option>
                }
            </InputSelect>
            <span class="input-group-text">Level</span>
            <input class="form-control" type="number" min="1" max="100" @bind-value="Levels.Offensive" @bind-value:after="UpdateOffensiveLevel" />
            <span class="input-group-text">Nature</span>
            <InputSelect class="form-select" @bind-Value="NatureIndicies.Offensive" @bind-Value:after="UpdateOffensiveNatureAsync">
                @for (var index = 0; index < Natures.Count; index++)
                {
                    <option value="@index">@Natures[index].Name.ToCapitalized()</option>
                }
            </InputSelect>
            <span class="input-group-text">Ability</span>
            <InputSelect class="form-select" @bind-Value="Abilities.Offensive" @bind-Value:after="UpdateOffensiveAbilityAsync">
                @for (var index = 0; index < _offensiveAbilityList.Count; index++)
                {
                    @if (_offensiveAbilityList[index].IsHidden)
                    {
                        <option value="@index">@_offensiveAbilityList[index].Ability.Name.ToCapitalized() (Hidden)</option>
                    }
                    else
                    {
                        <option value="@index">@_offensiveAbilityList[index].Ability.Name.ToCapitalized()</option>
                    }
                }
            </InputSelect>
            <span class="input-group-text">Held Item</span>
            <input class="form-control" list="offensiveItem" placeholder="Type to search..." @bind-value="Items.Offensive" @bind-value:after="UpdateOffensiveItemAsync" />
            <datalist id="offensiveItem">
                @for (var index = 0; index < ItemCollection.Count; index++)
                {
                    <option value="@ItemCollection[index].Name.ToCapitalized()">@ItemCollection[index].Name.ToCapitalized()</option>
                }
            </datalist>
            @if (_conditionals.IsOffensivePokemonTera)
            {
                <span class="input-group-text">Tera Type</span>
                <InputSelect class="form-select" @bind-Value="Tera.Offensive" @bind-Value:after="UpdateOffensiveTeraAsync">
                    @foreach (var type in Maps.TypeEffectivenessChart.Keys)
                    {
                        <option value="@type">@type.ToCapitalized()</option>
                    }
                </InputSelect>
            }
        </div>
        <div class="input-group">
            <span class="input-group-text">Defensive Pokemon</span>
            <InputSelect class="form-select" @bind-Value="FormIndicies.Defensive" @bind-Value:after="UpdateDefensiveForm">
                @for (var index = 0; index < _defensivePokemonList.Count; index++)
                {
                    <option value="@index">@_defensivePokemonList[index].Name.ToCapitalized()</option>
                }
            </InputSelect>
            <span class="input-group-text">Level</span>
            <input class="form-control" type="number" min="1" max="100" @bind-value="Levels.Defensive" @bind-value:after="UpdateDefensiveLevel" />
            <span class="input-group-text">Nature</span>
            <InputSelect class="form-select" @bind-Value="NatureIndicies.Defensive" @bind-Value:after="UpdateDefensiveNatureAsync">
                @for (var index = 0; index < Natures.Count; index++)
                {
                    <option value="@index">@Natures[index].Name.ToCapitalized()</option>
                }
            </InputSelect>
            <span class="input-group-text">Ability</span>
            <InputSelect class="form-select" @bind-Value="Abilities.Defensive" @bind-Value:after="UpdateDefensiveAbilityAsync">
                @for (var index = 0; index < _defensiveAbilityList.Count; index++)
                {
                    @if (_defensiveAbilityList[index].IsHidden)
                    {
                        <option value="@index">@_defensiveAbilityList[index].Ability.Name.ToCapitalized() (Hidden)</option>
                    }
                    else
                    {
                        <option value="@index">@_defensiveAbilityList[index].Ability.Name.ToCapitalized()</option>
                    }
                }
            </InputSelect>
            <span class="input-group-text">Held Item</span>
            <input class="form-control" list="defensiveItem" placeholder="Type to search..." @bind-value="Items.Defensive" @bind-value:after="UpdateDefensiveItemAsync" />
            <datalist id="defensiveItem">
                @for (var index = 0; index < ItemCollection.Count; index++)
                {
                    <option value="@ItemCollection[index].Name.ToCapitalized()">@ItemCollection[index].Name.ToCapitalized()</option>
                }
            </datalist>
            @if (_conditionals.IsDefensivePokemonTera)
            {
                <span class="input-group-text">Tera Type</span>
                <InputSelect class="form-select" @bind-Value="Tera.Defensive" @bind-Value:after="UpdateDefensiveTeraAsync">
                    @foreach (var type in Maps.TypeEffectivenessChart.Keys)
                    {
                        <option value="@type">@type.ToCapitalized()</option>
                    }
                </InputSelect>
            }
        </div>
        <div class="row text-center border border-dark">
            <div class="col">Name</div>
            <div class="col border-dark border-start">HP</div>
            <div class="col border-dark border-start">Attack</div>
            <div class="col border-dark border-start">Defense</div>
            <div class="col border-dark border-start">Special Attack</div>
            <div class="col border-dark border-start">Special Defense</div>
            <div class="col border-dark border-start">Speed</div>
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">@_offensivePokemon.Species.ToCapitalized() (@string.Join("/", _offensivePokemon.Types.Select(x => x.ToCapitalized())))</div>
            <input class="col border-dark border-start form-control" type="number" min="0" max="@_offensivePokemon.HP" @bind-value="_offensivePokemon.CurrentHP" />
            <div class="col border-dark border-start">@_offensivePokemon.Attack</div>
            <div class="col border-dark border-start">@_offensivePokemon.Defense</div>
            <div class="col border-dark border-start">@_offensivePokemon.SpecialAttack</div>
            <div class="col border-dark border-start">@_offensivePokemon.SpecialDefense</div>
            <div class="col border-dark border-start">@_offensivePokemon.Speed</div>
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">IVs</div>
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_offensivePokemon.IVs.HP" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_offensivePokemon.IVs.Attack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_offensivePokemon.IVs.Defense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_offensivePokemon.IVs.SpecialAttack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_offensivePokemon.IVs.SpecialDefense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_offensivePokemon.IVs.Speed" />
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">EVs</div>
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_offensivePokemon.EVs.HP" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_offensivePokemon.EVs.Attack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_offensivePokemon.EVs.Defense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_offensivePokemon.EVs.SpecialAttack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_offensivePokemon.EVs.SpecialDefense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_offensivePokemon.EVs.Speed" />
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">Stages</div>
            <div class="col border-dark border-start">N/A</div>
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_offensivePokemon.Stages.Attack" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_offensivePokemon.Stages.Defense" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_offensivePokemon.Stages.SpecialAttack" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_offensivePokemon.Stages.SpecialDefense" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_offensivePokemon.Stages.Speed" />
        </div>
        <br />
        <div class="row text-center border border-dark">
            <div class="col">Name</div>
            <div class="col border-dark border-start">HP</div>
            <div class="col border-dark border-start">Attack</div>
            <div class="col border-dark border-start">Defense</div>
            <div class="col border-dark border-start">Special Attack</div>
            <div class="col border-dark border-start">Special Defense</div>
            <div class="col border-dark border-start">Speed</div>
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">@_defensivePokemon.Species.ToCapitalized() (@string.Join("/", _defensivePokemon.Types.Select(x => x.ToCapitalized())))</div>
            <input class="col border-dark border-start form-control" type="number" min="0" max="@_defensivePokemon.HP" @bind-value="_defensivePokemon.CurrentHP" />
            <div class="col border-dark border-start">@_defensivePokemon.Attack</div>
            <div class="col border-dark border-start">@_defensivePokemon.Defense</div>
            <div class="col border-dark border-start">@_defensivePokemon.SpecialAttack</div>
            <div class="col border-dark border-start">@_defensivePokemon.SpecialDefense</div>
            <div class="col border-dark border-start">@_defensivePokemon.Speed</div>
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">IVs</div>
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_defensivePokemon.IVs.HP" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_defensivePokemon.IVs.Attack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_defensivePokemon.IVs.Defense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_defensivePokemon.IVs.SpecialAttack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_defensivePokemon.IVs.SpecialDefense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="_defensivePokemon.IVs.Speed" />
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">EVs</div>
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_defensivePokemon.EVs.HP" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_defensivePokemon.EVs.Attack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_defensivePokemon.EVs.Defense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_defensivePokemon.EVs.SpecialAttack" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_defensivePokemon.EVs.SpecialDefense" />
            <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="_defensivePokemon.EVs.Speed" />
        </div>
        <div class="row text-center border border-dark border-top-0">
            <div class="col">Stages</div>
            <div class="col border-dark border-start">N/A</div>
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_defensivePokemon.Stages.Attack" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_defensivePokemon.Stages.Defense" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_defensivePokemon.Stages.SpecialAttack" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_defensivePokemon.Stages.SpecialDefense" />
            <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="_defensivePokemon.Stages.Speed" />
        </div>
        <br />
        <div class="input-group">
            <span class="input-group-text">Move</span>
            <input class="form-control" list="moveDex" placeholder="Type to search..." @bind-value="_moveName" @bind-value:after="SetMoveAsync" />
            <datalist id="moveDex">
                @for (var index = 0; index < MovedexCollection.Count; index++)
                {
                    <option value="@MovedexCollection[index]">@MovedexCollection[index]</option>
                }
            </datalist>
        </div>
        @if (_move != null)
        {
            <div class="h3">
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="description-check" @bind-Value="_conditionals.DisplayDescription" />
                    <label class="form-check-label" for="description-check">
                        Move Description
                    </label>
                </div>
            </div>
            <div class="row border border-dark" hidden="@(!_conditionals.DisplayDescription)">
                <div class="col">Name</div>
                <div class="col border-dark border-start">Type</div>
                <div class="col border-dark border-start">Damage Class</div>
                <div class="col border-dark border-start">Description</div>
                <div class="col border-dark border-start">Base Power</div>
                <div class="col border-dark border-start">Accuracy</div>
            </div>
            <div class="row border border-dark border-top-0" hidden="@(!_conditionals.DisplayDescription)">
                <div class="col">@_move.Name.ToCapitalized()</div>
                <div class="col border-dark border-start">@_move.Type.Name.ToCapitalized()</div>
                <div class="col border-dark border-start">@_move.DamageClass.Name.ToCapitalized()</div>
                <div class="col border-dark border-start">@_flavorText</div>
                <div class="col border-dark border-start">@_damage</div>
                <div class="col border-dark border-start">@_move.Accuracy</div>
            </div>
            <div class="h3">
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="conditions-check" @bind-Value="_conditionals.DisplayConditions" />
                    <label class="form-check-label" for="conditions-check">
                        Conditions
                    </label>
                </div>
            </div>
            <div class="row" hidden="@(!_conditionals.DisplayConditions)">
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="critical-check" @bind-Value="_conditionals.IsCriticalHit" />
                    <label class="form-check-label" for="critical-check">
                        Critical?
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="missed-check" @bind-Value="_conditionals.LastMoveMissed" />
                    <label class="form-check-label" for="missed-check">
                        Did the last move miss?
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="glaive-rush-check" @bind-Value="_conditionals.AfterGlaiveRush" />
                    <label class="form-check-label" for="glaive-rush-check">
                        Did
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        use Glaive Rush?
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="minimized-check" @bind-Value="_conditionals.IsMinimized" />
                    <label class="form-check-label" for="minimized-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        minimized
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="laser-check" @bind-Value="_conditionals.IsLaserFocus" />
                    <label class="form-check-label" for="laser-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        under Laser Focus
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="dig-check" @bind-Value="_conditionals.UsedDig" @bind-Value:after="() => { _conditionals.UsedDive = false; _conditionals.UsedFly = false; }" />
                    <label class="form-check-label" for="dig-check">
                        Did
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        use Dig
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="dive-check" @bind-Value="_conditionals.UsedDive" @bind-Value:after="() => { _conditionals.UsedDig = false; _conditionals.UsedFly = false; }" />
                    <label class="form-check-label" for="dive-check">
                        Did
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        use Dive
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="fly-check" @bind-Value="_conditionals.UsedFly" @bind-Value:after="() => { _conditionals.UsedDive = false; _conditionals.UsedDig = false; }" />
                    <label class="form-check-label" for="fly-check">
                        Did
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        use Fly
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="reflect-check" @bind-Value="_conditionals.UsedReflect" />
                    <label class="form-check-label" for="reflect-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        under Reflect
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="light-screen-check" @bind-Value="_conditionals.UsedLightScreen" />
                    <label class="form-check-label" for="light-screen-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        under Light Screen
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="aurora-veil-check" @bind-Value="_conditionals.UsedAuroraVeil" />
                    <label class="form-check-label" for="aurora-veil-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        under Aurora Veil
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="tag-check" @bind-Value="_conditionals.IsTagBattle" @bind-Value:after="OnTagToggle" />
                    <label class="form-check-label" for="tag-check">
                        Is this a tag battle
                    </label>
                </div>
                @if (_conditionals.IsTagBattle)
                {
                    <div class="col-lg-2 form-check form-switch">
                        <InputCheckbox class="form-check-input" id="friend-guard-check" @bind-Value="_conditionals.IsFriendGuarded" @bind-Value:after="OnTagToggle" />
                        <label class="form-check-label" for="friend-guard-check">
                            Is
                            <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                            under Friend Guard
                        </label>
                    </div>
                }
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="protect-check" @bind-Value="_conditionals.ProtectActive" />
                    <label class="form-check-label" for="protect-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        under Protect
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="sub-check" @bind-Value="_conditionals.SubstituteActive" />
                    <label class="form-check-label" for="sub-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        under Substitute
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="sub-check" @bind-Value="_conditionals.IsOffensivePokemonTera" @bind-Value:after="OnTeraToggle" />
                    <label class="form-check-label" for="sub-check">
                        Is
                        <strong>@_offensivePokemon.Species.ToCapitalized()</strong>
                        terastalized?
                    </label>
                </div>
                <div class="col-lg-2 form-check form-switch">
                    <InputCheckbox class="form-check-input" id="sub-check" @bind-Value="_conditionals.IsDefensivePokemonTera" @bind-Value:after="OnTeraToggle" />
                    <label class="form-check-label" for="sub-check">
                        Is
                        <strong>@_defensivePokemon.Species.ToCapitalized()</strong>
                        terastalized?
                    </label>
                </div>
            </div>
            <div class="row"  hidden="@(!_conditionals.DisplayConditions)">
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="h4">Status condition for @_offensivePokemon.Species.ToCapitalized()</div>
                    <InputRadioGroup @bind-Value="StatusConditions.Offensive">
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="healthy-check" Value="@Statuses.Healthy" />
                            <label class="form-check-label" for="healthy-check">
                                @Statuses.Healthy
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="burn-check" Value="@Statuses.Burn" />
                            <label class="form-check-label" for="burn-check">
                                @Statuses.Burn
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="poisoned-check" Value="@Statuses.Poisoned" />
                            <label class="form-check-label" for="poisoned-check">
                                @Statuses.Poisoned
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="badly-poisoned-check" Value="@Statuses.BadlyPoisoned" />
                            <label class="form-check-label" for="badly-poisoned-check">
                                @Statuses.BadlyPoisoned
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="para-check" Value="@Statuses.Paralyzed" />
                            <label class="form-check-label" for="para-check">
                                @Statuses.Paralyzed
                            </label>
                        </div>
                    </InputRadioGroup>
                </div>
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="h4">Status condition for @_defensivePokemon.Species.ToCapitalized()</div>
                    <InputRadioGroup @bind-Value="StatusConditions.Defensive">
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="healthy-check" Value="@Statuses.Healthy" />
                            <label class="form-check-label" for="healthy-check">
                                @Statuses.Healthy
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="burn-check" Value="@Statuses.Burn" />
                            <label class="form-check-label" for="burn-check">
                                @Statuses.Burn
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="poisoned-check" Value="@Statuses.Poisoned" />
                            <label class="form-check-label" for="poisoned-check">
                                @Statuses.Poisoned
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="badly-poisoned-check" Value="@Statuses.BadlyPoisoned" />
                            <label class="form-check-label" for="badly-poisoned-check">
                                @Statuses.BadlyPoisoned
                            </label>
                        </div>
                        <div class="form-check">
                            <InputRadio class="form-check-input" id="para-check" Value="@Statuses.Paralyzed" />
                            <label class="form-check-label" for="para-check">
                                @Statuses.Paralyzed
                            </label>
                        </div>
                    </InputRadioGroup>
                </div>
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="h4">Weather</div>
                    <InputRadioGroup @bind-Value="_weather">
                        @foreach (var weather in Maps.WeatherEffectivenessChart.Keys)
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" id="@weather" Value="weather" />
                                <label class="form-check-label" for="@weather">
                                    @weather
                                </label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
                <div class="col-6 col-md-3 col-lg-2">
                    <div class="h4">Terrain</div>
                    <InputRadioGroup @bind-Value="_terrain">
                        @foreach (var terrain in Maps.TerrainEffectivenessChart.Keys)
                        {
                            <div class="form-check">
                                <InputRadio class="form-check-input" id="@terrain" Value="terrain" />
                                <label class="form-check-label" for="@terrain">
                                    @terrain
                                </label>
                            </div>
                        }
                    </InputRadioGroup>
                </div>
            </div>
            <div class="h3">Damage Rolls</div>
            <div class="h4">
                <strong>
                    @_move.Name.ToCapitalized():
                </strong>
                @SetDamageRolls()
            </div>
            <div class="row border border-dark text-center mb-4">
                @foreach (var damageRoll in _rolls)
                {
                    <div class="col-6 col-lg-3 col-xl-2 col-xxl border-end border-dark">
                        <div class="d-flex d-flex-column align-items-center">
                            <div class="col border-end border-dark">@damageRoll.Roll% DR</div>
                            <div class="col">@damageRoll.Damage</div>
                        </div>
                    </div>
                }
            </div>
        }
    }

    @if (SetListsErrors.Any() || SetPokemonErrors.Any() || SetMovesErrors.Any())
    {
        <div class="h3">Errors</div>
        @foreach (var error in SetListsErrors)
        {
            foreach (var line in error.Split("\n"))
            {
                <div>@line</div>
            }
        }
        @foreach (var error in SetPokemonErrors)
        {
            foreach (var line in error.Split("\n"))
            {
                <div>@line</div>
            }
        }
        @foreach (var error in SetMovesErrors)
        {
            foreach (var line in error.Split("\n"))
            {
                <div>@line</div>
            }
        }
    }
}

@code {
    private StringPair Names = new StringPair { Offensive = "Abomasnow", Defensive = "Abomasnow" },
            StatusConditions = new StringPair { Offensive = Statuses.Healthy, Defensive = Statuses.Healthy },
            Items = new StringPair { Offensive = "Heavy Duty Boots", Defensive = "Heavy Duty Boots" },
            Tera = new StringPair();
    private IntPair NatureIndicies = new IntPair { Offensive = 1, Defensive = 1 },
        Levels = new IntPair { Offensive = 100, Defensive = 100 },
        FormIndicies = new(),
        Abilities = new();
    private List<NamedApiResource<Nature>> Natures = [];
    private List<NamedApiResource<Item>> ItemCollection = [];
    private List<string> PokedexCollection = [], MovedexCollection = [];
    private string _moveName = "Blizzard";
    private ICollection<string> SetListsErrors = [], SetPokemonErrors = [], SetMovesErrors = [];
    private string _weather = Weather.Hail,
        _terrain = Terrain.None;
    private Move? _move;
    private List<Pokemon> _offensivePokemonList = [], _defensivePokemonList = [];
    private List<PokemonAbility> _offensiveAbilityList = [], _defensiveAbilityList = [];
    private bool IsReady;
    private Conditionals _conditionals = new Conditionals();
    private StattedPokemon? _offensivePokemon, _defensivePokemon;
    private IEnumerable<DamageRoll> _rolls = [];
    private string? _flavorText;
    private object? _damage;

    protected override async Task OnInitializedAsync()
    {
        Natures = await _pokeApiService.GetNatures();
        ItemCollection = await _pokeApiService.GetItemsAsync();
        PokedexCollection = await _pokeApiService.GetPokedexAsync();
        MovedexCollection = await _pokeApiService.GetMovesAsync();
        await SetMoveAsync();
        await SetListsAsync();
        IsReady = true;
    }

    private string SetDamageRolls()
    {
        SetMovesErrors.Clear();
        try
        {
            _rolls =  _damageService.GetDamageRolls(
                _offensivePokemon!,
                _defensivePokemon!,
                _move!,
                _conditionals,
                StatusConditions,
                _weather,
                _terrain);

            var lowRoll = (_rolls.FirstOrDefault()?.Damage ?? 0) / _defensivePokemon!.CurrentHP * 100;
            var highRoll = (_rolls.LastOrDefault()?.Damage ?? 0) / _defensivePokemon!.CurrentHP * 100;
            return $"{Math.Floor(lowRoll * 10) / 10} - {Math.Floor(highRoll * 10) / 10}%";
        }
        catch (Exception ex)
        {
            SetMovesErrors.Add(ex.ToString());
            _rolls = [];
            return string.Empty;
        }
    }

    private void OnTagToggle()
    {
        if (!_conditionals.IsTagBattle)
        {
            _conditionals.IsFriendGuarded = false;
        }
    }

    private void OnTeraToggle()
    {
        if (!(_conditionals.IsOffensivePokemonTera || _offensivePokemon == null))
        {
            _offensivePokemon.TeraType = null;
        }
        if (!(_conditionals.IsDefensivePokemonTera || _defensivePokemon == null))
        {
            _defensivePokemon.TeraType = null;
        }
    }

    private async Task SetMoveAsync()
    {
        _move = null;
        SetMovesErrors.Clear();
        if (string.IsNullOrEmpty(_moveName))
        {
            return;
        }
        if (MovedexCollection.Any(x => x.Equals(_moveName, StringComparison.CurrentCultureIgnoreCase)))
        {
            _move = await _pokeApiService.GetMoveAsync(_moveName);
            if (_move == null)
            {
                return;
            }
            _flavorText = _move.FlavorTextEntries.FirstOrDefault(x => x.Language.Name == "en" && x.VersionGroup.Name == "scarlet-violet")?.FlavorText ?? "Not present in Scarlet/Violet";
            if (_move.DamageClass.Name == DamageClasses.Status)
            {
                _damage = "0";
            }
            else if (_move.Power == null)
            {
                _damage = "Variable";
            }
            else
            {
                _damage = _move.Power;
            }
        }
        else
        {
            SetMovesErrors.Add($"Failed to get move: {_moveName}");
        }
    }

    private async Task SetListsAsync()
    {
        SetListsErrors.Clear();
        var offensiveResult = await TrySetOffensiveFormsAsync();
        var defensiveResult = await TrySetDefensiveFormsAsync();
        if (!SetListsErrors.Any() && offensiveResult && defensiveResult)
        {
            await SetPokemonAsync();
        }
    }

    private async Task SetPokemonAsync()
    {
        try
        {
            SetPokemonErrors.Clear();
            SetOffensiveAbilities();
            SetDefensiveAbilities();
            _offensivePokemon = await GetStattedPokemonAsync(_offensivePokemonList, NatureIndicies.Offensive, FormIndicies.Offensive, Levels.Offensive);
            _defensivePokemon = await GetStattedPokemonAsync(_defensivePokemonList, NatureIndicies.Defensive, FormIndicies.Defensive, Levels.Defensive);
        }
        catch (Exception ex)
        {
            SetPokemonErrors.Add(ex.ToString());
        }
    }

    private async Task ResetOffensivePokemonAsync()
    {
        SetListsErrors.Clear();
        var result = await TrySetOffensiveFormsAsync();
        if (!result)
        {
            return;
        }
        UpdateOffensiveForm();
    }

    private async Task ResetDefensivePokemonAsync()
    {
        SetListsErrors.Clear();
        var result = await TrySetDefensiveFormsAsync();
        if (!result)
        {
            return;
        }
        UpdateDefensiveForm();
    }

    private void UpdateOffensiveForm()
    {
        _offensivePokemon!.UpdateForm(_offensivePokemonList[FormIndicies.Offensive]);
        _offensivePokemon.CurrentHP = _offensivePokemon.HP;
        SetOffensiveAbilities();
        UpdateOffensiveAbilityAsync();
    }

    private void UpdateDefensiveForm()
    {
        _defensivePokemon!.UpdateForm(_defensivePokemonList[FormIndicies.Defensive]);
        _defensivePokemon.CurrentHP = _defensivePokemon.HP;
        SetDefensiveAbilities();
        UpdateDefensiveAbilityAsync();
    }

    private async Task UpdateOffensiveNatureAsync()
    {
        var offensiveNature = await _pokeApiService.GetNatureAsync(Natures[NatureIndicies.Offensive]);
        _offensivePokemon!.UpdateNature(offensiveNature);
    }

    private async Task UpdateDefensiveNatureAsync()
    {
        var defensiveNature = await _pokeApiService.GetNatureAsync(Natures[NatureIndicies.Defensive]);
        _defensivePokemon!.UpdateNature(defensiveNature);
    }

    private void UpdateOffensiveLevel()
    {
        _offensivePokemon!.Level = Levels.Offensive;
        _offensivePokemon.CurrentHP = _offensivePokemon.HP;
    }

    private void UpdateDefensiveLevel()
    {
        _defensivePokemon!.Level = Levels.Defensive;
        _defensivePokemon.CurrentHP = _defensivePokemon.HP;
    }

    private void UpdateOffensiveAbilityAsync()
    {
        _offensivePokemon!.Ability = _offensiveAbilityList[Abilities.Offensive].Ability.Name;
    }

    private void UpdateDefensiveAbilityAsync()
    {
        _defensivePokemon!.Ability = _defensiveAbilityList[Abilities.Defensive].Ability.Name;
    }

    private void UpdateOffensiveItemAsync()
    {
        _offensivePokemon!.HeldItem = Items.Offensive.ToLowerCaseKebab();
    }

    private void UpdateDefensiveItemAsync()
    {
        _defensivePokemon!.HeldItem = Items.Defensive.ToLowerCaseKebab();
    }

    private void UpdateOffensiveTeraAsync()
    {
        _offensivePokemon!.TeraType = Tera.Offensive;
    }

    private void UpdateDefensiveTeraAsync()
    {
        _defensivePokemon!.TeraType = Tera.Defensive;
    }

    public async Task<bool> TrySetOffensiveFormsAsync()
    {
        if (string.IsNullOrEmpty(Names.Offensive))
        {
            return false;
        }
        _offensivePokemonList = [];
        FormIndicies.Offensive = 0;
        if (PokedexCollection.Any(x => x.Equals(Names.Offensive, StringComparison.CurrentCultureIgnoreCase)))
        {
            _offensivePokemonList = await _pokeApiService.GetPokemonAsync(Names.Offensive);
            return true;
        }
        else
        {
            SetListsErrors.Add($"Failed to get offensive pokemon: {Names.Offensive}");
            return false;
        }
    }

    public async Task<bool> TrySetDefensiveFormsAsync()
    {
        if (string.IsNullOrEmpty(Names.Defensive))
        {
            return false;
        }
        _defensivePokemonList = [];
        FormIndicies.Defensive = 0;
        if (PokedexCollection.Any(x => x.Equals(Names.Defensive, StringComparison.CurrentCultureIgnoreCase)))
        {
            _defensivePokemonList = await _pokeApiService.GetPokemonAsync(Names.Defensive);
            return true;
        }
        else
        {
            SetListsErrors.Add($"Failed to get defensive pokemon: {Names.Defensive}");
            return false;
        }
    }

    private void SetOffensiveAbilities()
    {
        if (Levels.Offensive > 100)
        {
            Levels.Offensive = 100;
        }
        else if (Levels.Offensive < 1)
        {
            Levels.Offensive = 1;
        }
        _offensiveAbilityList = _offensivePokemonList[FormIndicies.Offensive].Abilities;
    }

    private void SetDefensiveAbilities()
    {
        if (Levels.Defensive > 100)
        {
            Levels.Defensive = 100;
        }
        else if (Levels.Defensive < 1)
        {
            Levels.Defensive = 1;
        }
        _defensiveAbilityList = _defensivePokemonList[FormIndicies.Defensive].Abilities;
    }

    private async Task<StattedPokemon> GetStattedPokemonAsync(List<Pokemon> formList, int natureIndex, int formIndex, int level)
    {
        var nature = await _pokeApiService.GetNatureAsync(Natures[natureIndex]);
        var pokemon = new StattedPokemon(formList[formIndex], nature)
        {
            Level = level,
        };
        pokemon.EVs.HP = 248;
        pokemon.EVs.Defense = 252;
        pokemon.EVs.Speed = 8;
        pokemon.IVs.HP = 31;
        pokemon.IVs.Attack = 31;
        pokemon.IVs.Defense = 31;
        pokemon.IVs.SpecialAttack = 31;
        pokemon.IVs.SpecialDefense = 31;
        pokemon.IVs.Speed = 31;
        pokemon.CurrentHP = pokemon.HP;

        return pokemon;
    }
}
