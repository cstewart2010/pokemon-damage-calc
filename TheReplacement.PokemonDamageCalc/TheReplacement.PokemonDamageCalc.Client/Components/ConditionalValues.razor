@using TheReplacement.PokemonDamageCalc.Client.Constants;
@using TheReplacement.PokemonDamageCalc.Client.Extensions;
<div class="h3">
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="conditions-check" @bind-Value="_displayConditionals" />
        <label class="form-check-label" for="conditions-check">
            Conditions
        </label>
    </div>
</div>
<div class="row" hidden="@(!_displayConditionals)">
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="critical-check" @bind-Value="IsCritical" @oninput="e => OnBoolChanged(e, IsCriticalChanged)" />
        <label class="form-check-label" for="critical-check">
            Critical?
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="missed-check" @bind-Value="LastMoveMissed" @oninput="e => OnBoolChanged(e, LastMoveMissedChanged)" />
        <label class="form-check-label" for="missed-check">
            Did the last move miss?
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="glaive-rush-check" @bind-Value="AfterGlaiveRush" @oninput="e => OnBoolChanged(e, AfterGlaiveRushChanged)" />
        <label class="form-check-label" for="glaive-rush-check">
            Did
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            use Glaive Rush?
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="minimized-check" @bind-Value="IsMinimized" @oninput="e => OnBoolChanged(e, IsMinimizedChanged)" />
        <label class="form-check-label" for="minimized-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            minimized
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="laser-check" @bind-Value="IsLaserFocus" @oninput="e => OnBoolChanged(e, IsLaserFocusChanged)" />
        <label class="form-check-label" for="laser-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            under Laser Focus
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="dig-check" @bind-Value="UsedDig" @oninput="e => OnBoolChanged(e, UsedDigChanged)" />
        <label class="form-check-label" for="dig-check">
            Did
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            use Dig
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="dive-check" @bind-Value="UsedDive" @oninput="e => OnBoolChanged(e, UsedDiveChanged)" />
        <label class="form-check-label" for="dive-check">
            Did
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            use Dive
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="fly-check" @bind-Value="UsedFly" @oninput="e => OnBoolChanged(e, UsedFlyChanged)" />
        <label class="form-check-label" for="fly-check">
            Did
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            use Fly
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="reflect-check" @bind-Value="UsedReflect" @oninput="e => OnBoolChanged(e, UsedReflectChanged)" />
        <label class="form-check-label" for="reflect-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            under Reflect
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="light-screen-check" @bind-Value="UsedLightScreen" @oninput="e => OnBoolChanged(e, UsedLightScreenChanged)" />
        <label class="form-check-label" for="light-screen-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            under Light Screen
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="aurora-veil-check" @bind-Value="UsedAuroraVeil" @oninput="e => OnBoolChanged(e, UsedAuroraVeilChanged)" />
        <label class="form-check-label" for="aurora-veil-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            under Aurora Veil
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="tag-check" @bind-Value="IsTagBattle" @oninput="e => OnBoolChanged(e, IsTagBattleChanged)" />
        <label class="form-check-label" for="tag-check">
            Is this a tag battle
        </label>
    </div>
    @if (IsTagBattle)
    {
        <div class="col-lg-2 form-check form-switch">
            <InputCheckbox class="form-check-input" id="friend-guard-check" @bind-Value="IsFriendGuarded" @oninput="e => OnBoolChanged(e, IsFriendGuardedChanged)" />
            <label class="form-check-label" for="friend-guard-check">
                Is
                <strong>@DefensivePokemon.ToCapitalized()</strong>
                under Friend Guard
            </label>
        </div>
    }
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="protect-check" @bind-Value="ProtectActive" @oninput="e => OnBoolChanged(e, ProtectActiveChanged)" />
        <label class="form-check-label" for="protect-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            under Protect
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="sub-check" @bind-Value="SubstituteActive" @oninput="e => OnBoolChanged(e, SubstituteActiveChanged)" />
        <label class="form-check-label" for="sub-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            under Substitute
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="sub-check" @bind-Value="IsOffensivePokemonTera" @oninput="e => OnBoolChanged(e, IsOffensivePokemonTeraChanged)" />
        <label class="form-check-label" for="sub-check">
            Is
            <strong>@OffensivePokemon.ToCapitalized()</strong>
            terastalized?
        </label>
    </div>
    <div class="col-lg-2 form-check form-switch">
        <InputCheckbox class="form-check-input" id="sub-check" @bind-Value="IsDefensivePokemonTera" @oninput="e => OnBoolChanged(e, IsDefensivePokemonTeraChanged)" />
        <label class="form-check-label" for="sub-check">
            Is
            <strong>@DefensivePokemon.ToCapitalized()</strong>
            terastalized?
        </label>
    </div>
</div>
<div class="row" hidden="@(!_displayConditionals)">
    <div class="col-6 col-md-3 col-lg-2">
        <div class="h4">Status condition for @OffensivePokemon.ToCapitalized()</div>
        <InputRadioGroup @bind-Value="OffensiveStatusCondition" @oninput="e => OnStringChanged(e, OffensiveStatusConditionChanged)">
            <div class="form-check">
                <InputRadio class="form-check-input" id="healthy-check" Value="@Statuses.Healthy" />
                <label class="form-check-label" for="healthy-check">
                    @Statuses.Healthy
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="burn-check" Value="@Statuses.Burn" />
                <label class="form-check-label" for="burn-check">
                    @Statuses.Burn
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="poisoned-check" Value="@Statuses.Poisoned" />
                <label class="form-check-label" for="poisoned-check">
                    @Statuses.Poisoned
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="badly-poisoned-check" Value="@Statuses.BadlyPoisoned" />
                <label class="form-check-label" for="badly-poisoned-check">
                    @Statuses.BadlyPoisoned
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="para-check" Value="@Statuses.Paralyzed" />
                <label class="form-check-label" for="para-check">
                    @Statuses.Paralyzed
                </label>
            </div>
        </InputRadioGroup>
    </div>
    <div class="col-6 col-md-3 col-lg-2">
        <div class="h4">Status condition for @DefensivePokemon.ToCapitalized()</div>
        <InputRadioGroup @bind-Value="DefensiveStatusCondition" @oninput="e => OnStringChanged(e, DefensiveStatusConditionChanged)">
            <div class="form-check">
                <InputRadio class="form-check-input" id="healthy-check" Value="@Statuses.Healthy" />
                <label class="form-check-label" for="healthy-check">
                    @Statuses.Healthy
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="burn-check" Value="@Statuses.Burn" />
                <label class="form-check-label" for="burn-check">
                    @Statuses.Burn
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="poisoned-check" Value="@Statuses.Poisoned" />
                <label class="form-check-label" for="poisoned-check">
                    @Statuses.Poisoned
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="badly-poisoned-check" Value="@Statuses.BadlyPoisoned" />
                <label class="form-check-label" for="badly-poisoned-check">
                    @Statuses.BadlyPoisoned
                </label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" id="para-check" Value="@Statuses.Paralyzed" />
                <label class="form-check-label" for="para-check">
                    @Statuses.Paralyzed
                </label>
            </div>
        </InputRadioGroup>
    </div>
    <div class="col-6 col-md-3 col-lg-2">
        <div class="h4">Weather</div>
        <InputRadioGroup @bind-Value="Weather" @oninput="e => OnStringChanged(e, WeatherChanged)">
            @foreach (var weather in Maps.WeatherEffectivenessChart.Keys)
            {
                <div class="form-check">
                    <InputRadio class="form-check-input" id="@weather" Value="weather" />
                    <label class="form-check-label" for="@weather">
                        @weather
                    </label>
                </div>
            }
        </InputRadioGroup>
    </div>
    <div class="col-6 col-md-3 col-lg-2">
        <div class="h4">Terrain</div>
        <InputRadioGroup @bind-Value="Terrain" @oninput="e => OnStringChanged(e, TerrainChanged)">
            @foreach (var terrain in Maps.TerrainEffectivenessChart.Keys)
            {
                <div class="form-check">
                    <InputRadio class="form-check-input" id="@terrain" Value="terrain" />
                    <label class="form-check-label" for="@terrain">
                        @terrain
                    </label>
                </div>
            }
        </InputRadioGroup>
    </div>
</div>

@code {
    private bool _displayConditionals = true;

    [Parameter]
    public required string OffensivePokemon { get; set; }
    [Parameter]
    public required string DefensivePokemon { get; set; }
    [Parameter]
    public required bool IsCritical { get; set; }
    [Parameter]
    public EventCallback<bool> IsCriticalChanged { get; set; }
    [Parameter]
    public required bool LastMoveMissed { get; set; }
    [Parameter]
    public required EventCallback<bool> LastMoveMissedChanged { get; set; }
    [Parameter]
    public required bool AfterGlaiveRush { get; set; }
    [Parameter]
    public EventCallback<bool> AfterGlaiveRushChanged { get; set; }
    [Parameter]
    public required bool IsMinimized { get; set; }
    [Parameter]
    public EventCallback<bool> IsMinimizedChanged { get; set; }
    [Parameter]
    public required bool IsLaserFocus { get; set; }
    [Parameter]
    public EventCallback<bool> IsLaserFocusChanged { get; set; }
    [Parameter]
    public required bool UsedDig { get; set; }
    [Parameter]
    public EventCallback<bool> UsedDigChanged { get; set; }
    [Parameter]
    public required bool UsedDive { get; set; }
    [Parameter]
    public EventCallback<bool> UsedDiveChanged { get; set; }
    [Parameter]
    public required bool UsedFly { get; set; }
    [Parameter]
    public EventCallback<bool> UsedFlyChanged { get; set; }
    [Parameter]
    public required bool UsedReflect { get; set; }
    [Parameter]
    public EventCallback<bool> UsedReflectChanged { get; set; }
    [Parameter]
    public required bool UsedLightScreen { get; set; }
    [Parameter]
    public EventCallback<bool> UsedLightScreenChanged { get; set; }
    [Parameter]
    public required bool UsedAuroraVeil { get; set; }
    [Parameter]
    public EventCallback<bool> UsedAuroraVeilChanged { get; set; }
    [Parameter]
    public required bool IsTagBattle { get; set; }
    [Parameter]
    public EventCallback<bool> IsTagBattleChanged { get; set; }
    [Parameter]
    public required bool IsFriendGuarded { get; set; }
    [Parameter]
    public EventCallback<bool> IsFriendGuardedChanged { get; set; }
    [Parameter]
    public required bool ProtectActive { get; set; }
    [Parameter]
    public EventCallback<bool> ProtectActiveChanged { get; set; }
    [Parameter]
    public required bool SubstituteActive { get; set; }
    [Parameter]
    public EventCallback<bool> SubstituteActiveChanged { get; set; }
    [Parameter]
    public required bool IsOffensivePokemonTera { get; set; }
    [Parameter]
    public EventCallback<bool> IsOffensivePokemonTeraChanged { get; set; }
    [Parameter]
    public required bool IsDefensivePokemonTera { get; set; }
    [Parameter]
    public EventCallback<bool> IsDefensivePokemonTeraChanged { get; set; }
    [Parameter]
    public required string OffensiveStatusCondition { get; set; }
    [Parameter]
    public EventCallback<string> OffensiveStatusConditionChanged { get; set; }
    [Parameter]
    public required string DefensiveStatusCondition { get; set; }
    [Parameter]
    public EventCallback<string> DefensiveStatusConditionChanged { get; set; }
    [Parameter]
    public required string Weather { get; set; }
    [Parameter]
    public EventCallback<string> WeatherChanged { get; set; }
    [Parameter]
    public required string Terrain { get; set; }
    [Parameter]
    public EventCallback<string> TerrainChanged { get; set; }

    private async Task OnBoolChanged(ChangeEventArgs e, EventCallback<bool> callback)
    {
        if (bool.TryParse(e.Value?.ToString(), out var check))
        {
            await callback.InvokeAsync(check);
        }
    }

    private async Task OnStringChanged(ChangeEventArgs e, EventCallback<string> callback)
    {
        var item = e.Value?.ToString();
        if (item != null)
        {
            await callback.InvokeAsync(item);
        }
    }
}
