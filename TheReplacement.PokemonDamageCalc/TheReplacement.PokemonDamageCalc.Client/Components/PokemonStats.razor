@using TheReplacement.PokemonDamageCalc.Client.Extensions;
<div class="row text-center border border-dark">
    <div class="col">Name</div>
    <div class="col border-dark border-start">HP</div>
    <div class="col border-dark border-start">Attack</div>
    <div class="col border-dark border-start">Defense</div>
    <div class="col border-dark border-start">Special Attack</div>
    <div class="col border-dark border-start">Special Defense</div>
    <div class="col border-dark border-start">Speed</div>
</div>
<div class="row text-center border border-dark border-top-0">
    <div class="col">@Pokemon.Species.ToCapitalized() (@string.Join("/", Pokemon.Types.Select(x => x.ToCapitalized())))</div>
    <input class="col border-dark border-start form-control" type="number" min="0" max="@Pokemon.HP" @bind-value="CurrentHP" @oninput="OnCurrentHPChanged" />
    <div class="col border-dark border-start">@Pokemon.Attack</div>
    <div class="col border-dark border-start">@Pokemon.Defense</div>
    <div class="col border-dark border-start">@Pokemon.SpecialAttack</div>
    <div class="col border-dark border-start">@Pokemon.SpecialDefense</div>
    <div class="col border-dark border-start">@Pokemon.Speed</div>
</div>
<div class="row text-center border border-dark border-top-0">
    <div class="col">IVs</div>
    <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="Pokemon.IVs.HP" @oninput="e => OnIntChanged(e, HPIVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="Pokemon.IVs.Attack" @oninput="e => OnIntChanged(e, AttackIVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="Pokemon.IVs.Defense" @oninput="e => OnIntChanged(e, DefenseIVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="Pokemon.IVs.SpecialAttack" @oninput="e => OnIntChanged(e, SpecialAttackIVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="Pokemon.IVs.SpecialDefense" @oninput="e => OnIntChanged(e, SpecialDefenseIVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="31" @bind-value="Pokemon.IVs.Speed" @oninput="e => OnIntChanged(e, SpeedIVsChanged)" />
</div>
<div class="row text-center border border-dark border-top-0">
    <div class="col">EVs</div>
    <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="Pokemon.EVs.HP" @oninput="e => OnIntChanged(e, HPEVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="Pokemon.EVs.Attack" @oninput="e => OnIntChanged(e, AttackEVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="Pokemon.EVs.Defense" @oninput="e => OnIntChanged(e, DefenseEVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="Pokemon.EVs.SpecialAttack" @oninput="e => OnIntChanged(e, SpecialAttackEVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="Pokemon.EVs.SpecialDefense" @oninput="e => OnIntChanged(e, SpecialDefenseEVsChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="0" max="252" @bind-value="Pokemon.EVs.Speed" @oninput="e => OnIntChanged(e, SpeedEVsChanged)" />
</div>
<div class="row text-center border border-dark border-top-0">
    <div class="col">Stages</div>
    <div class="col border-dark border-start">N/A</div>
    <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="Pokemon.Stages.Attack" @oninput="e => OnIntChanged(e, AttackStagesChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="Pokemon.Stages.Defense" @oninput="e => OnIntChanged(e, DefenseStagesChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="Pokemon.Stages.SpecialAttack" @oninput="e => OnIntChanged(e, SpecialAttackStagesChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="Pokemon.Stages.SpecialDefense" @oninput="e => OnIntChanged(e, SpecialDefenseStagesChanged)" />
    <input class="col border-dark border-start form-control" type="number" min="-6" max="6" @bind-value="Pokemon.Stages.Speed" @oninput="e => OnIntChanged(e, SpeedStagesChanged)" />
</div>
<br />

@code {
    [Parameter]
    public required DataModel.StattedPokemon Pokemon { get; set; }
    [Parameter]
    public required double CurrentHP { get; set; }
    [Parameter]
    public EventCallback<double> CurrentHPChanged { get; set; }
    [Parameter]
    public required int HPIVs { get; set; }
    [Parameter]
    public EventCallback<int> HPIVsChanged { get; set; }
    [Parameter]
    public required int AttackIVs { get; set; }
    [Parameter]
    public EventCallback<int> AttackIVsChanged { get; set; }
    [Parameter]
    public required int DefenseIVs { get; set; }
    [Parameter]
    public EventCallback<int> DefenseIVsChanged { get; set; }
    [Parameter]
    public required int SpecialAttackIVs { get; set; }
    [Parameter]
    public EventCallback<int> SpecialAttackIVsChanged { get; set; }
    [Parameter]
    public required int SpecialDefenseIVs { get; set; }
    [Parameter]
    public EventCallback<int> SpecialDefenseIVsChanged { get; set; }
    [Parameter]
    public required int SpeedIVs { get; set; }
    [Parameter]
    public EventCallback<int> SpeedIVsChanged { get; set; }
    [Parameter]
    public required int HPEVs { get; set; }
    [Parameter]
    public EventCallback<int> HPEVsChanged { get; set; }
    [Parameter]
    public required int AttackEVs { get; set; }
    [Parameter]
    public EventCallback<int> AttackEVsChanged { get; set; }
    [Parameter]
    public required int DefenseEVs { get; set; }
    [Parameter]
    public EventCallback<int> DefenseEVsChanged { get; set; }
    [Parameter]
    public required int SpecialAttackEVs { get; set; }
    [Parameter]
    public EventCallback<int> SpecialAttackEVsChanged { get; set; }
    [Parameter]
    public required int SpecialDefenseEVs { get; set; }
    [Parameter]
    public EventCallback<int> SpecialDefenseEVsChanged { get; set; }
    [Parameter]
    public required int SpeedEVs { get; set; }
    [Parameter]
    public EventCallback<int> SpeedEVsChanged { get; set; }
    [Parameter]
    public required int AttackStages { get; set; }
    [Parameter]
    public EventCallback<int> AttackStagesChanged { get; set; }
    [Parameter]
    public required int DefenseStages { get; set; }
    [Parameter]
    public EventCallback<int> DefenseStagesChanged { get; set; }
    [Parameter]
    public required int SpecialAttackStages { get; set; }
    [Parameter]
    public EventCallback<int> SpecialAttackStagesChanged { get; set; }
    [Parameter]
    public required int SpecialDefenseStages { get; set; }
    [Parameter]
    public EventCallback<int> SpecialDefenseStagesChanged { get; set; }
    [Parameter]
    public required int SpeedStages { get; set; }
    [Parameter]
    public EventCallback<int> SpeedStagesChanged { get; set; }

    private async Task OnCurrentHPChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out var hp))
        {
            await CurrentHPChanged.InvokeAsync(hp);
        }
    }

    private async Task OnIntChanged(ChangeEventArgs e, EventCallback<int> callback)
    {
        if (int.TryParse(e.Value?.ToString(), out var hp))
        {
            await callback.InvokeAsync(hp);
        }
    }
}
